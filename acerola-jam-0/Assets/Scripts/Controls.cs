//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""805c39ca-d314-44f8-8aaa-3778877c218f"",
            ""actions"": [
                {
                    ""name"": ""SpaceTap"",
                    ""type"": ""Button"",
                    ""id"": ""65315a19-8c02-431d-b2d2-98f2633c3c50"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceHold"",
                    ""type"": ""Button"",
                    ""id"": ""fa582eec-f816-4abe-be30-a2545a15ab1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpaceSpam"",
                    ""type"": ""Button"",
                    ""id"": ""cb4970ea-f08d-4e00-9a82-fe36f1f2d781"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4af0a2f4-0508-4b4d-bc88-24b673a80882"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap(duration=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e09a0b1f-a6d7-4149-9044-d402ec25b1b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eb66d85-e1ac-461c-8cbb-1894ff996eea"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpaceSpam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SpaceTap = m_Player.FindAction("SpaceTap", throwIfNotFound: true);
        m_Player_SpaceHold = m_Player.FindAction("SpaceHold", throwIfNotFound: true);
        m_Player_SpaceSpam = m_Player.FindAction("SpaceSpam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SpaceTap;
    private readonly InputAction m_Player_SpaceHold;
    private readonly InputAction m_Player_SpaceSpam;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpaceTap => m_Wrapper.m_Player_SpaceTap;
        public InputAction @SpaceHold => m_Wrapper.m_Player_SpaceHold;
        public InputAction @SpaceSpam => m_Wrapper.m_Player_SpaceSpam;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SpaceTap.started += instance.OnSpaceTap;
            @SpaceTap.performed += instance.OnSpaceTap;
            @SpaceTap.canceled += instance.OnSpaceTap;
            @SpaceHold.started += instance.OnSpaceHold;
            @SpaceHold.performed += instance.OnSpaceHold;
            @SpaceHold.canceled += instance.OnSpaceHold;
            @SpaceSpam.started += instance.OnSpaceSpam;
            @SpaceSpam.performed += instance.OnSpaceSpam;
            @SpaceSpam.canceled += instance.OnSpaceSpam;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SpaceTap.started -= instance.OnSpaceTap;
            @SpaceTap.performed -= instance.OnSpaceTap;
            @SpaceTap.canceled -= instance.OnSpaceTap;
            @SpaceHold.started -= instance.OnSpaceHold;
            @SpaceHold.performed -= instance.OnSpaceHold;
            @SpaceHold.canceled -= instance.OnSpaceHold;
            @SpaceSpam.started -= instance.OnSpaceSpam;
            @SpaceSpam.performed -= instance.OnSpaceSpam;
            @SpaceSpam.canceled -= instance.OnSpaceSpam;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSpaceTap(InputAction.CallbackContext context);
        void OnSpaceHold(InputAction.CallbackContext context);
        void OnSpaceSpam(InputAction.CallbackContext context);
    }
}
